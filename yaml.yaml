# the yaml.yaml interpreter written in yaml.yaml
# this tries to be a comparison to how lisp dialects interpreters are written

# we demonstrate that certain YAML structures
node:
  # the ~ scalar might be important enough to warrant its own abstraction
  scalar:
  sequence:
    list:
      head:
        index:
        value:
  mapping:
    list:
      head:
        key:
        value:
# https://yaml.org/spec/1.2/spec.html#id2763452

# can be mapped to lambda calculus terms
term:
  variable:
  abstraction:
    x:
    term:
  application:
# https://en.wikipedia.org/wiki/Lambda_calculus
# http://www.cs.tau.ac.il/~msagiv/courses/apl12/etc.pdf

# this homomorphism to lambda calculus proves that
# yaml.yaml is a turing complete language
~:
  - node
  - # left-associative application
    # { i -> value_i }
    scalar: variable
    sequence:
      # is this the syntax for a recursive call in yaml.yaml?
      ~:
        mapping:
          index: key
    # TODO ~ is the fixed point combinator??
    # ((λk0.λk1...(~)) v0 v1 ...)
    mapping: abstraction
# case mapping:
#  case all keys are scalars: TODO
#  case single kvp:
#   case ~ key: ???
#   case scalar key:
#    case ~ value: TODO
#    case scalar value: TODO
#    case scalar value: TODO
#    case scalar value: TODO
#   case mapping key: TODO
# http://dev.stephendiehl.com/fun/003_lambda_calculus.html#let

# and, given that you like what you read,
# very terse as a general-purpose functional programming language

# the files structure is not yet formalized,
# but it can be thought of as a mapping between
# a key in this file and the name in {name}.yaml.yaml

# the integration with an environment (an OS? a git repository?)
# should be considered thoroughly
# an assumption was necessary for the sake of organization
# https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html

# def Y = λf.((λx.(f (x x))) (λx.(f (x x))))
'Y':
  ? f:
  : - ? x:
      : - f
        -   - x
            - x
    - ? x:
      : - f
        -   - x
            - x
# https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed-point_combinators_in_lambda_calculus
